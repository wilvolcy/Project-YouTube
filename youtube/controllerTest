import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

@RunWith(SpringRunner.class)
@WebMvcTest(value= AccountController.class)
public class AccountControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private AccountServiceImpl accountService;
    @MockBean
    private ChannelService channelService;
    @MockBean
    private SubscriptionService subscriptionService;
    @MockBean
    private UploadService uploadService;
    @MockBean
    private AccountRepository accountRepository;




    @Test
    public void getAccountTest() throws Exception {
        Account mockAccount = new Account();
        mockAccount.setUserName("yared");
        mockAccount.setEmail("yg@gmail.com");
        mockAccount.setPassword("password");
        mockAccount.setSubscriptionList(null);
        mockAccount.setChannelList(null);

        Mockito.when(
                accountService.getAccount(Mockito.anyString())).thenReturn(mockAccount);

        String URI = "/rest/account/get?name=yared";
        RequestBuilder requestBuilder = MockMvcRequestBuilders.get(
                URI).accept(
                MediaType.APPLICATION_JSON);

        MvcResult result = mockMvc.perform(requestBuilder).andReturn();
        String expectedJson = this.mapToJson(mockAccount);
        String outputInJson = result.getResponse().getContentAsString();
        assertThat(outputInJson).isEqualTo(expectedJson);
    }


    @Test
    public void getChannelsTest() throws Exception {
        Channel kim = new Channel();
        Channel abc = new Channel();
        Channel bbc = new Channel();
        List<Channel> channelList = Arrays.asList(kim,abc,bbc);



        Account mockAccount = new Account();
        mockAccount.setUserName("zelalem");
        mockAccount.setEmail("zel@gmail.com");
        mockAccount.setPassword("password");
        mockAccount.setSubscriptionList(null);
        mockAccount.setChannelList(channelList);

        Mockito.when(
                accountService.getAccountChannels(Mockito.anyString())).thenReturn(channelList);

        String URI = "/rest/account/getChannels?name=zelalem";
        RequestBuilder requestBuilder = MockMvcRequestBuilders.get(
                URI).accept(
                MediaType.APPLICATION_JSON);

        MvcResult result = mockMvc.perform(requestBuilder).andReturn();
        String expectedJson = this.mapToJson(channelList);
        String outputInJson = result.getResponse().getContentAsString();
        assertThat(outputInJson).isEqualTo(expectedJson);
    }


    @Test
    public void loginTest() throws Exception {
        Account mockAccount = new Account();
        mockAccount.setUserName("yared");
        mockAccount.setEmail("yg@gmail.com");
        mockAccount.setPassword("password");
        mockAccount.setSubscriptionList(null);
        mockAccount.setChannelList(null);

        Mockito.when(
                accountService.getAccount(Mockito.anyString())).thenReturn(mockAccount);

        String URI = "/rest/account/get?name=abenzer&password=password";
        RequestBuilder requestBuilder = MockMvcRequestBuilders.get(
                URI).accept(
                MediaType.APPLICATION_JSON);

        MvcResult result = mockMvc.perform(requestBuilder).andReturn();
        String expectedJson = this.mapToJson(mockAccount);
        String outputInJson = result.getResponse().getContentAsString();
        assertThat(outputInJson).isEqualTo(expectedJson);
    }

    @Test
    public void getSubscribtionsTest() throws Exception {

        Account mockAccount = new Account();
        mockAccount.setUserName("zelalem");
        mockAccount.setEmail("zel@gmail.com");
        mockAccount.setPassword("password");

        Channel kim = new Channel();
        Channel bbc = new Channel();


        Subscription a= new Subscription();
        a.setAccount(mockAccount);
        a.setChannel(kim);
        Subscription b= new Subscription();
        b.setAccount(mockAccount);
        b.setChannel(bbc);
        List<Subscription> subscriptionList = Arrays.asList(a,b);
        List<Channel> channelList = new ArrayList<>();
        subscriptionList.forEach(i-> channelList.add(i.getChannel()));


        mockAccount.setSubscriptionList(subscriptionList);
        Mockito.when(
                accountService.getSubscribedChannels(Mockito.anyString())).thenReturn(channelList);

        String URI = "/rest/account/getSubscriptions?username=zelalem";
        RequestBuilder requestBuilder = MockMvcRequestBuilders.get(
                URI).accept(
                MediaType.APPLICATION_JSON);

        MvcResult result = mockMvc.perform(requestBuilder).andReturn();
        String expectedJson = this.mapToJson(channelList);
        String outputInJson = result.getResponse().getContentAsString();
        assertThat(outputInJson).isEqualTo(expectedJson);
    }


    @Test
    public void subscribTest() throws Exception {

        Account mockAccount = new Account();
        mockAccount.setUserName("zelalem");
        mockAccount.setEmail("zel@gmail.com");
        mockAccount.setPassword("password");

        Channel kim = new Channel();
        Subscription a= new Subscription();
        a.setAccount(mockAccount);
        a.setChannel(kim);


         Mockito.when(
                subscriptionService.createSubscription(Mockito.any(Subscription.class))).thenReturn(a);

        String URI = "/rest/account/subscribe?channelName=kim&username=zelalem";
        RequestBuilder requestBuilder = MockMvcRequestBuilders.post(
                URI).accept(
                MediaType.APPLICATION_JSON);

        MvcResult result = mockMvc.perform(requestBuilder).andReturn();
        String expectedJson = this.mapToJson(a);
        String outputInJson = result.getResponse().getContentAsString();
        assertThat(outputInJson).isEqualTo(expectedJson);
    }

    private String mapToJson(Object object) throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();
        return objectMapper.writeValueAsString(object);
    }

}
